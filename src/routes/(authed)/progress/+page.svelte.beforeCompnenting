<script lang="ts">
    import type { PageServerData } from "./$types";
//    import RadioGroup from "./RadioGroup.svelte";

    let { data }: { data: PageServerData } = $props();

    const psychologicalSymptoms = [
        // pychological
        { name: "depressive", label: "depressive" },
        { name: "lack_of_drive", label: "lack of drive" },
        { name: "low_energy", label: "low energy" },
        { name: "alxithymic", label: "alexithymic" },
        { name: "foggy_groggy", label: "foggy/groggy" },
        { name: "irritable", label: "irritable" },
        { name: "anger", label: "anger" },
        { name: "impulsive", label: "impulsive" },
    ];

    const somaticSymptoms = [
        // autonomic
        { name: "heating_sense", label: "heating sense" },
        { name: "sweating", label: "sweating" },
        { name: "impending_death", label: "impending death" },
        // head & neck
        { name: "concentration", label: "concentration" },
        { name: "headacheMigraine", label: "headache/migraine" },
        { name: "blepharospasm", label: "blepharospasm" },
        { name: "tinnitus", label: "tinnitus" },
        { name: "vertigo", label: "vertigo" },
        { name: "globus", label: "globus" },
        // chest
        { name: "palpitation", label: "palpitation" },
        { name: "heaviness", label: "heaviness" },
        { name: "dyspnea", label: "dyspnea" },
        // abdomen
        { name: "nausea", label: "nausea" },
        { name: "indigestion", label: "indigestion" },
    ];

    const options = [
        { value: "negative", label: "-" },
        { value: "positive", label: "+" },
        { value: "neutral", label: "+/-" },
        { value: "improved", label: "improved" },
        { value: "aggravated", label: "aggravated" }
    ];

    const percentRange = Array.from({ length: 10 }, (_, i) => ({
        value: `${90 - i * 10}`,
        label: `${90 - i * 10}`
    }));

    const timePeriods = ["awake", "morning", "noon", "afternoon", "dusk", "evening", "night", "before bed", "sleep"];
    const sxProgress = ["persist", "aggravated", "improved", "resolved"];

    interface SymptomData {
        psychological: Record<string, string>;
        somatic: Record<string, string>;
        occursIn: string;
        attack: {
            type: string;
            frequency: string;
            unit: string;
            intensity: string;
        };
        suicidal: {
            type: string[];
            method: string[];
            otherMethod: string;
            when: {
                amount: string;
                unit: string;
            };
        };
        homocidal: {
            type: string[];
        };
    }

    interface SymptomItemsData {
        name: string;
        label: string;
    }

    let symptom = $state<SymptomData>({
        psychological: {}, somatic: {}, occursIn: "", attack: { type: "", frequency: "", unit: "", intensity: "" }, suicidal: { type: [], method: [], otherMethod: "", when: { amount: "", unit: ""} }, homocidal: { type: [] },
    })

    interface InterPersonalData {
        relationType: string[];
        otherRelationType: string;
        frequency: string;
        unit: string;
        method: string[];
        otherMethod: string;
        withdrawal: string;
    }

    let interPersonal = $state<InterPersonalData>({
        relationType: [], otherRelationType: "", frequency: "", unit: "", method: [], otherMethod: "", withdrawal: ""
    })

    interface LeisureNhobbiesData {
        noLeisure: boolean;
        leisure: string;
        noPleasure: boolean;
        pleasure: string;
        noHobby: boolean;
        hobby: string;
    }

    let leisureNhobbies = $state<LeisureNhobbiesData>({
        noLeisure: false, leisure: "", noPleasure: false, pleasure: "", noHobby: false, hobby: ""
    })

    interface AlcoholData {
        alcoholicBeverage: string[];
        progress: string;
        amount: string;
        frequency: string;
        unit: string;
        otherType: string[];
        alcoholSnack: string[];
    }

    let alcohol = $state<AlcoholData>({
        alcoholicBeverage: [], progress: "", amount: "", frequency: "", unit: "", otherType: [], alcoholSnack: []
    })

    interface DietData {
        interval: string;
        times: string;
        appetite: string;
        bingeEating: {
            type: string;
            when: string;
        };
    }

    let diet = $state<DietData>({
        interval: '', times: '', appetite: '', bingeEating: {type: '', when: ''}
    })

    function updateArray(stateArray: string[], value: string, checked: boolean): string[] {
            if (checked) {
                return [...stateArray, value];
            } else {
                return stateArray.filter(item => item !== value);
            }
        }
</script>

{#snippet symptomList(symptomItems: SymptomItemsData[], symptomGroup: "psychological" | "somatic")}
    <fieldset>
        <legend>{symptomGroup == "psychological" ? "Psychological Symptoms" : "Somatic Symptoms"}</legend>
        {#each symptomItems as symptomItem}
            <div class="flex items-center gap-4">
                <span>{symptomItem.label}</span>
                {#each options as option}
                    <label>
                        <input type="radio" value={option.value} bind:group={symptom[symptomGroup][symptomItem.name]} />
                        {option.label}
                    </label>
                {/each}
            </div>
        {/each}
    </fieldset>
{/snippet}

{#snippet inputGroup(type: "radio" | "checkbox", name: string = "", options: string[], bindFunction: (value: string, checked: type extends "radio" ? string : boolean) => void, currentValues: string[] | string, labelPrefix: string = "", labelSuffix: string = "", className: string = "flex items-center gap-4")}
    <div class={className}>
        {#each options as option}
            <label>
                <input 
                    type={type} 
                    value={option} 
                    name={name} 
                    checked={type === "radio" ? currentValues === option : (currentValues as string[]).includes(option)} 
                    onchange={(e) => bindFunction(option, type === "radio" ? option : e.target.checked as boolean)} 
                />
                {labelPrefix}{option}{labelSuffix}
            </label>
        {/each}
    </div>
{/snippet}
<!--
{@render inputGroup('checkbox', 'relationType', ['social', 'friends', 'family', 'neighbor'], (value, checked) => {interPersonal.relationType = updateArray(interPersonal.relationType, value, checked);}, interPersonal.relationType /* prefix, suffix, className omitted intentionally */)}
{@render inputGroup('radio', 'interPersonalWithdrawalType', ['social withdrawal', 'no relationship'], (value, checked) => {interPersonal.withdrawalType = checked;}, interPersonal.withdrawalType, "", "", "space-x-2")}
-->

<article class="prose">
<h1>{data.user.username} Progress Notes</h1>
<p>You are in the authed & welcomed.</p>
<p>Your user ID is {data.user.id}.</p>

<form>
<h2>Subjective</h2>
    <h3>Symptoms</h3>
    {@render symptomList(psychologicalSymptoms, "psychological")}
    {@render symptomList(somaticSymptoms, "somatic")}

    <fieldset>
        <legend>mainly occures in/at</legend>
            {@render inputGroup("radio", "occursIn", timePeriods, (value, checked) => {symptom.occursIn = checked;}, symptom.occursIn)}
    </fieldset>

    <fieldset>
        <legend>Attack</legend>
        <div class="flex items-center gap-4">
            {@render inputGroup("radio", "attackType", sxProgress, (value, checked) => {symptom.attack.type = checked;}, symptom.attack.type)}

            <input type="number" bind:value={symptom.attack.frequency} placeholder="times" />

            {@render inputGroup("radio", "attackUnit", ["day", "week"], (value, checked) => {symptom.attack.unit = checked;}, symptom.attack.unit, "/", "", "sapce-x-2")}

            <label>
                <select bind:value={symptom.attack.intensity}>
                    {#each percentRange as pRange}
                        <option value={pRange.value}>{pRange.label}</option>
                    {/each}
                </select>
                % intensity
            </label>
        </div>
    </fieldset>

    <fieldset>
        <legend>Suicidal idea</legend>
            {@render inputGroup("checkbox", "suicidalType", ["idea", "plan", "attempt"], (value, checked) => {symptom.suicidal.type = updateArray(symptom.suicidal.type, value, checked);}, symptom.suicidal.type)}

        <div class="flex items-center gap-4">
            {@render inputGroup("checkbox", "suicidalMethod", ["hanging", "poisoning", "knife"], (value, checked) => {symptom.suicidal.method = updateArray(symptom.suicidal.method, value, checked);}, symptom.suicidal.method)}
            <input type="text" bind:value={symptom.suicidal.otherMethod} placeholder="Other method" />
        </div>

        <div class="flex items-center gap-4">
            <input type="number" bind:value={symptom.suicidal.when.amount} placeholder="1 day/month/year ago" />
            {@render inputGroup("radio", "suicidalUnit", ["days", "months", "years"], (value, checked) => { symptom.suicidal.when.unit = checked;}, symptom.suicidal.when.unit, "", " ago")}
        </div>
    </fieldset>

    <fieldset>
        <legend>Homocidal idea</legend>
            {@render inputGroup("checkbox", "homocidalType", ["idea", "plan", "attempt"], (value, checked) => {symptom.homocidal.type = updateArray(symptom.homocidal.type, value, checked);}, symptom.homocidal.type)}
    </fieldset>

    <h3>Interpersonal Relations</h3>
    <fieldset>
        <legend>Relationship with</legend>
        <div class="flex items-center gap-4">
            {@render inputGroup("checkbox", "relationType", ["social", "friends", "family", "neighbor"], (value, checked) => {interPersonal.relationType = updateArray(interPersonal.relationType, value, checked);}, interPersonal.relationType)}
            <input type="text" bind:value={interPersonal.otherRelationType} placeholder="others" />
            <input type="number" bind:value={interPersonal.frequency} placeholder="times" />
            {@render inputGroup("radio", "interPersonalUnit", ["week", "month"], (value, checked) => {interPersonal.unit = checked;}, interPersonal.unit, "/", "", "space-x-2")}
        </div>
        <legend>How to play</legend>
        <div class="flex items-center gap-4">
            {@render inputGroup("checkbox", "interPersonalMethod", ["talking", "eating", "drinking", "traveling"], (value, checked) => {interPersonal.method = updateArray(interPersonal.method, value, checked);}, interPersonal.method)}
            <input type="text" bind:value={interPersonal.otherMethod} placeholder="others" />
        </div>
        <legend>Withdrawal</legend>
            {@render inputGroup("radio", "interPersonalWithdrawal", ["social withdrawal", "no relationship"], (value, checked) => {interPersonal.withdrawal = checked;}, interPersonal.withdrawal, "", "", "space-x-2")}
    </fieldset>

    <h3>Leisure & Hobbies</h3>
    <fieldset>
        <legend>Leisure & Hobbies</legend>
        <div class="flex items-center gap-4">
            <label>No Leisure <input type="checkbox" name="noLeisure" bind:checked={leisureNhobbies.noLeisure} /></label>
            <input type="text" bind:value={leisureNhobbies.leisure} placeholder="leisures" disabled={leisureNhobbies.noLeisure} />
        </div>
        <div class="flex items-center gap-4">
            <label>No Pleasure <input type="checkbox" name="noPleasure" bind:checked={leisureNhobbies.noPleasure} /></label>
            <input type="text" bind:value={leisureNhobbies.pleasure} placeholder="pleasures" disabled={leisureNhobbies.noPleasure} />
        </div>
        <div class="flex items-center gap-4">
            <label>No Hobby <input type="checkbox" name="noHobby" bind:checked={leisureNhobbies.noHobby} /></label>
            <input type="text" bind:value={leisureNhobbies.hobby} placeholder="hobbies" disabled={leisureNhobbies.noHobby} />
        </div>
    </fieldset>

    <h3>Alcohol</h3>
    <fieldset>
        <legend>Alcoholic beverage</legend>
            {@render inputGroup("checkbox", "alcoholicBeverage", ["소주", "beer", "wine", "양주", "막걸리", "폭탄주", "mix"], (value, checked) => {alcohol.alcoholicBeverage = updateArray(alcohol.alcoholicBeverage, value, checked);}, alcohol.alcoholicBeverage)}
        <legend>Amount & Frequency</legend>
        <div class="flex items-center gap-4">
            <input type="text" name="alcoholAmount" bind:value={alcohol.amount} placeholder="amount" /><label for="alcoholAmount">/one time</label><br>
            <input type="text" bind:value={alcohol.frequency} placeholder="times" />
            {@render inputGroup("radio", "alcoholUnit", ["day", "week", "month"], (value, checked) => {alcohol.unit = checked;}, alcohol.unit, "/", "", "space-x-2")}
        </div>
        <span>changed over time:</span>
            {@render inputGroup("radio", "alcoholProgress", ["persist", "increase", "neutral", "decrease"], (value, checked) => {alcohol.progress = checked;}, alcohol.progress)}

        <legend>Alcohol snack</legend>
            {@render inputGroup("checkbox", "alcoholSnack", ["안주 없음", "meat", "fruits", "반찬", "..."], (value, checked) => {alcohol.alcoholSnack = updateArray(alcohol.alcoholSnack, value, checked);}, alcohol.alcoholSnack)}
    </fieldset>

    <h3>Diet</h3>
    <fieldset>
        <legend>Intake interval</legend>
            {@render inputGroup("radio", "intakeInterval", ["regular", "irregular"], (value, checked) => {diet.interval = checked;}, diet.interval)}

<h2>Objective</h>
    <h3>MSE</h3>
    <fieldset>
        <legend>General appearance</legend>
</form>

<pre class="p-4 bg-gray-100 text-gray-900 rounded">
{JSON.stringify(symptom, null, 2)}
{JSON.stringify(interPersonal, null, 2)}
{JSON.stringify(leisureNhobbies, null, 2)}
{JSON.stringify(alcohol, null, 2)}
{JSON.stringify(diet, null, 2)}
</pre>

</article>
